The main feature I will be implementing is crepescular rays as a post-processing effect. 
My approach will be to make renders from the scene in FBOs and then apply fragment shaders 
to these FBOs to create my final image. Specifically, I will make two renders of the original scene,
one with normal shading and another containing light sources and occluding geometry in black. Then,
the crepescular ray fragment shader will be applied to this second image to create the crepescular rays.
Finally, The content from the original shaded frame buffer and the crepescular rays buffer will be combined
to create the final image. For the crepescular ray fragment shader I will use the algorithm described 
here: https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process
For each pixel, the shader will compute a brightness from the light source at that point, and then compute an
occlusion factor by taking repeated samples along the path from the light source to the pixel in screen space and computing a
ratio of emmissive samples to occluding samples.

Here are some resources I have gone through/will use for this project:
https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process
https://medium.com/community-play-3d/god-rays-whats-that-5a67f26aeac2
https://en.wikipedia.org/wiki/Volumetric_lighting
https://nehe.gamedev.net/tutorial/radial_blur__rendering_to_a_texture/18004/
https://research.ijcaonline.org/volume108/number11/pxc3900275.pdf

My program structure will build off of Sceneview. I will load in a scene the same way and simply add on to the rendering functions
so that the postprocessing effects are also performed. As reference for the use of FBOs with openGL I will use the FBO lab.

My guiding deadlines will be to have the crepescular ray postprocessing effect working by the 12/4 checkin and 
to have a basic scene set up by the preliminary demo date of 12/7. That will allow to make finishing touches for the final
few days before the demo day. To hit these deadlines, I will make an intermediate goal of having a partially functional
post-processing effect done by 11/30. In particular, I'd like to have the openGL aspects working (setting up and rendering to/from FBOs)
by this date and I'd also like to have one of the fragment shaders basically working (either rendering light sources with occluding geometry in black,
or the actual crepescular ray shader depending on which ends up being easier). This timeline should put me on track to have completed features
by the demo day!